// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/auth/auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/14kear/onlineVotingBackend/auth-service/internal/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockTokenStorage is a mock of TokenStorage interface.
type MockTokenStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTokenStorageMockRecorder
}

// MockTokenStorageMockRecorder is the mock recorder for MockTokenStorage.
type MockTokenStorageMockRecorder struct {
	mock *MockTokenStorage
}

// NewMockTokenStorage creates a new mock instance.
func NewMockTokenStorage(ctrl *gomock.Controller) *MockTokenStorage {
	mock := &MockTokenStorage{ctrl: ctrl}
	mock.recorder = &MockTokenStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenStorage) EXPECT() *MockTokenStorageMockRecorder {
	return m.recorder
}

// DeleteRefreshToken mocks base method.
func (m *MockTokenStorage) DeleteRefreshToken(ctx context.Context, userID int64, appID int, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", ctx, userID, appID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockTokenStorageMockRecorder) DeleteRefreshToken(ctx, userID, appID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockTokenStorage)(nil).DeleteRefreshToken), ctx, userID, appID, token)
}

// IsRefreshTokenValid mocks base method.
func (m *MockTokenStorage) IsRefreshTokenValid(ctx context.Context, userID int64, appID int, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRefreshTokenValid", ctx, userID, appID, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRefreshTokenValid indicates an expected call of IsRefreshTokenValid.
func (mr *MockTokenStorageMockRecorder) IsRefreshTokenValid(ctx, userID, appID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRefreshTokenValid", reflect.TypeOf((*MockTokenStorage)(nil).IsRefreshTokenValid), ctx, userID, appID, token)
}

// RevokeRefreshToken mocks base method.
func (m *MockTokenStorage) RevokeRefreshToken(ctx context.Context, userID int64, appID int, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRefreshToken", ctx, userID, appID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeRefreshToken indicates an expected call of RevokeRefreshToken.
func (mr *MockTokenStorageMockRecorder) RevokeRefreshToken(ctx, userID, appID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRefreshToken", reflect.TypeOf((*MockTokenStorage)(nil).RevokeRefreshToken), ctx, userID, appID, token)
}

// SaveToken mocks base method.
func (m *MockTokenStorage) SaveToken(ctx context.Context, userID int64, appID int, token string, expiresAt time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveToken", ctx, userID, appID, token, expiresAt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveToken indicates an expected call of SaveToken.
func (mr *MockTokenStorageMockRecorder) SaveToken(ctx, userID, appID, token, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToken", reflect.TypeOf((*MockTokenStorage)(nil).SaveToken), ctx, userID, appID, token, expiresAt)
}

// MockUserSaver is a mock of UserSaver interface.
type MockUserSaver struct {
	ctrl     *gomock.Controller
	recorder *MockUserSaverMockRecorder
}

// MockUserSaverMockRecorder is the mock recorder for MockUserSaver.
type MockUserSaverMockRecorder struct {
	mock *MockUserSaver
}

// NewMockUserSaver creates a new mock instance.
func NewMockUserSaver(ctrl *gomock.Controller) *MockUserSaver {
	mock := &MockUserSaver{ctrl: ctrl}
	mock.recorder = &MockUserSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSaver) EXPECT() *MockUserSaverMockRecorder {
	return m.recorder
}

// SaveUser mocks base method.
func (m *MockUserSaver) SaveUser(ctx context.Context, email string, passHash []byte) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, email, passHash)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockUserSaverMockRecorder) SaveUser(ctx, email, passHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUserSaver)(nil).SaveUser), ctx, email, passHash)
}

// MockUserProvider is a mock of UserProvider interface.
type MockUserProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserProviderMockRecorder
}

// MockUserProviderMockRecorder is the mock recorder for MockUserProvider.
type MockUserProviderMockRecorder struct {
	mock *MockUserProvider
}

// NewMockUserProvider creates a new mock instance.
func NewMockUserProvider(ctrl *gomock.Controller) *MockUserProvider {
	mock := &MockUserProvider{ctrl: ctrl}
	mock.recorder = &MockUserProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProvider) EXPECT() *MockUserProviderMockRecorder {
	return m.recorder
}

// IsAdmin mocks base method.
func (m *MockUserProvider) IsAdmin(ctx context.Context, userID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockUserProviderMockRecorder) IsAdmin(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockUserProvider)(nil).IsAdmin), ctx, userID)
}

// User mocks base method.
func (m *MockUserProvider) User(ctx context.Context, email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", ctx, email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockUserProviderMockRecorder) User(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockUserProvider)(nil).User), ctx, email)
}

// MockAppProvider is a mock of AppProvider interface.
type MockAppProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAppProviderMockRecorder
}

// MockAppProviderMockRecorder is the mock recorder for MockAppProvider.
type MockAppProviderMockRecorder struct {
	mock *MockAppProvider
}

// NewMockAppProvider creates a new mock instance.
func NewMockAppProvider(ctrl *gomock.Controller) *MockAppProvider {
	mock := &MockAppProvider{ctrl: ctrl}
	mock.recorder = &MockAppProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppProvider) EXPECT() *MockAppProviderMockRecorder {
	return m.recorder
}

// App mocks base method.
func (m *MockAppProvider) App(ctx context.Context, appID int) (models.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "App", ctx, appID)
	ret0, _ := ret[0].(models.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// App indicates an expected call of App.
func (mr *MockAppProviderMockRecorder) App(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "App", reflect.TypeOf((*MockAppProvider)(nil).App), ctx, appID)
}
